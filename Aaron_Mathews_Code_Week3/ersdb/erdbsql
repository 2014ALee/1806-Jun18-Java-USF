CREATE TABLE roles (
ers_user_role_id NUMBER PRIMARY KEY,
user_role VARCHAR2(10) NOT NULL
)

CREATE TABLE ers_users (
ers_users_id NUMBER PRIMARY KEY,
ers_username VARCHAR2(50) UNIQUE,
ers_password VARCHAR2(50) NOT NULL,
user_first_name VARCHAR2(100) NOT NULL,
user_last_name VARCHAR2(100) NOT NULL,
user_email VARCHAR2(150) UNIQUE,
user_role_id NUMBER NOT NULL,
CONSTRAINT FK_UserRole FOREIGN KEY (user_role_id) REFERENCES 
roles(ers_user_role_id)
ON DELETE CASCADE
)

CREATE TABLE ers_reimbursement_type (
reimb_type_id NUMBER PRIMARY KEY,
reimb_type VARCHAR2(10) NOT NULL
)

CREATE TABLE ers_reimbursement_status (
reimb_status_id NUMBER PRIMARY KEY,
reimb_status VARCHAR2(10) NOT NULL
)

CREATE TABLE ers_reimbursement (
reimb_id NUMBER PRIMARY KEY,
reimb_amount NUMBER NOT NULL,
reimb_submitted TIMESTAMP NOT NULL,
reimb_resolved TIMESTAMP,
reimb_description VARCHAR2(250) NOT NULL,
reimb_receipt BLOB,
reimb_author NUMBER NOT NULL,
reimb_resolver NUMBER,
reimb_status_id NUMBER NOT NULL,
reimb_type_id NUMBER NOT NULL,
CONSTRAINT FK_AuthorId  FOREIGN KEY (reimb_author) REFERENCES ers_users(ers_users_id)
ON DELETE CASCADE,
CONSTRAINT FK_ResolverId  FOREIGN KEY (reimb_resolver) REFERENCES ers_users(ers_users_id)
ON DELETE CASCADE,
CONSTRAINT FK_StatusId  FOREIGN KEY (reimb_status_id) REFERENCES ers_reimbursement_status(reimb_status_id)
ON DELETE CASCADE,
CONSTRAINT FK_TypeId  FOREIGN KEY (reimb_type_id) REFERENCES ers_reimbursement_type(reimb_type_id)
ON DELETE CASCADE
)

commit;


CREATE SEQUENCE ers_user_seq
MINVALUE 1
MAXVALUE 9999999999
INCREMENT BY 1
START WITH 1;

-- Create a trigger that will use art_seq whenever a new row is inserted
CREATE OR REPLACE TRIGGER ers_user_trigger
BEFORE INSERT ON ers_users         -- the logic of this trigger will execute BEFORE any insert on the artist table
FOR EACH ROW                    -- it will do the logic for each row inserted

BEGIN
    SELECT ers_user_seq.NEXTVAL      -- get the next value from our sequence
    INTO :new.ers_users_id          -- put that value into the artistid field of the row being inserted
    FROM dual;                  -- need to use dual because we are not getting the value from any table
END;
/


CREATE SEQUENCE reimb_seq
MINVALUE 1
MAXVALUE 9999999999
INCREMENT BY 1
START WITH 1;

-- Create a trigger that will use art_seq whenever a new row is inserted
CREATE OR REPLACE TRIGGER reimb_trigger
BEFORE INSERT ON ers_reimbursement         -- the logic of this trigger will execute BEFORE any insert on the artist table
FOR EACH ROW                    -- it will do the logic for each row inserted

BEGIN
    SELECT reimb_seq.NEXTVAL      -- get the next value from our sequence
    INTO :new.reimb_id          -- put that value into the artistid field of the row being inserted
    FROM dual;                  -- need to use dual because we are not getting the value from any table
END;
/


CREATE SEQUENCE status_seq
MINVALUE 1
MAXVALUE 9999999999
INCREMENT BY 1
START WITH 1;

-- Create a trigger that will use art_seq whenever a new row is inserted
CREATE OR REPLACE TRIGGER status_trigger
BEFORE INSERT ON ers_reimbursement_status         -- the logic of this trigger will execute BEFORE any insert on the artist table
FOR EACH ROW                    -- it will do the logic for each row inserted

BEGIN
    SELECT status_seq.NEXTVAL      -- get the next value from our sequence
    INTO :new.reimb_status_id          -- put that value into the artistid field of the row being inserted
    FROM dual;                  -- need to use dual because we are not getting the value from any table
END;
/


CREATE SEQUENCE type_seq
MINVALUE 1
MAXVALUE 9999999999
INCREMENT BY 1
START WITH 1;

-- Create a trigger that will use art_seq whenever a new row is inserted
CREATE OR REPLACE TRIGGER type_trigger
BEFORE INSERT ON ers_reimbursement_type         -- the logic of this trigger will execute BEFORE any insert on the artist table
FOR EACH ROW                    -- it will do the logic for each row inserted

BEGIN
    SELECT type_seq.NEXTVAL      -- get the next value from our sequence
    INTO :new.reimb_type_id          -- put that value into the artistid field of the row being inserted
    FROM dual;                  -- need to use dual because we are not getting the value from any table
END;
/

INSERT INTO ers_reimbursement_status (reimb_status) VALUES ('Pending');

INSERT INTO ers_reimbursement_status (reimb_status) VALUES ('Approved');

INSERT INTO ers_reimbursement_status (reimb_status) VALUES ('Denied');

commit;

INSERT INTO ers_reimbursement_type (reimb_type) VALUES ('Lodging');
INSERT INTO ers_reimbursement_type (reimb_type) VALUES ('Travel');
INSERT INTO ers_reimbursement_type (reimb_type) VALUES ('Food');
INSERT INTO ers_reimbursement_type (reimb_type) VALUES ('Other');

ALTER TABLE ers_reimbursement
MODIFY reimb_amount NUMBER (10,2);

commit;
