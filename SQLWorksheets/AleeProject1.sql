CREATE TABLE ERS_REIMBURSEMENT(
REIMB_ID        NUMBER CONSTRAINT ERS_REIMBURSEMENT_PK PRIMARY KEY,
REIMB_AMOUNT    NUMBER,
REIMB_SUBMITTED TIMESTAMP,
REIMB_RESOLVED  TIMESTAMP,
REIMB_DESC      VARCHAR2(250),
REIMB_AUTHOR    NUMBER,
REIMB_RESOLVER  NUMBER,
REIMB_STATUS_ID NUMBER DEFAULT 1,
REIMB_TYPE_ID   NUMBER,

CONSTRAINT ERS_USERS_FK_AUTH FOREIGN KEY (REIMB_AUTHOR)REFERENCES ERS_USERS (ERS_USERS_ID) ON DELETE CASCADE,
CONSTRAINT ERS_USERS_FK_RESLVR FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS (ERS_USERS_ID) ON DELETE CASCADE,
CONSTRAINT ERS_REIMBURSEMENT_STATUS_FK FOREIGN KEY (REIMB_STATUS_ID)REFERENCES ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID)ON DELETE CASCADE,
CONSTRAINT ERS_REIMBURSEMENT_TYPE_FK FOREIGN KEY(REIMB_TYPE_ID)REFERENCES ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID) ON DELETE CASCADE
);

CREATE TABLE ERS_REIMBURSEMENT_STATUS(
REIMB_STATUS_ID NUMBER CONSTRAINT REIMB_STATUS_PK PRIMARY KEY,
REIMB_STATUS    VARCHAR2(10) DEFAULT 1
);
commit;
CREATE TABLE ERS_REIMBURSEMENT_TYPE(
REIMB_TYPE_ID   NUMBER CONSTRAINT REIMB_TYPE_PK PRIMARY KEY,
REIMB_TYPE      VARCHAR2(10)
);

CREATE TABLE ERS_USERS(
ERS_USERS_ID    NUMBER CONSTRAINT ERS_USERS_PK PRIMARY KEY,
ERS_USERNAME    VARCHAR2(50) UNIQUE,
ERS_PASSWORD    VARCHAR2(50),
USER_FIRST_NAME VARCHAR2(100),
USER_LAST_NAME  VARCHAR2(100),
USER_EMAIL      VARCHAR2(150) UNIQUE,
USER_ROLE_ID    NUMBER DEFAULT 1,
CONSTRAINT USER_ROLES_FK FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES (ERS_USER_ROLE_ID) ON DELETE CASCADE
);
delete from ers_reimbursement where reimb_id = 42;
CREATE TABLE ERS_USER_ROLES(
ERS_USER_ROLE_ID    NUMBER CONSTRAINT ERS_USER_ROLES_PK PRIMARY KEY,
USER_ROLE           VARCHAR2(10) DEFAULT 1
);
CREATE OR REPLACE PROCEDURE check_username(
username IN VARCHAR2, counter OUT NUMBER)
IS
other_username VARCHAR2 (25);
BEGIN
    SELECT COUNT(1) INTO counter FROM ERS_USERS WHERE (ERS_USERNAME = other_username);
END;
/

CREATE OR REPLACE PROCEDURE check_email(
email IN VARCHAR2, counter OUT NUMBER)
IS
other_email VARCHAR2 (25);
BEGIN
    SELECT COUNT(1) INTO counter FROM ERS_USERS WHERE (USER_EMAIL = other_email);
END;
/

create or replace PROCEDURE newReimbursement(
reimbamount IN NUMBER, reimbsubmit IN TIMESTAMP,
reimbdesc IN VARCHAR2,riembauthor IN VARCHAR2, riembtypeID IN NUMBER)
IS
BEGIN
    INSERT INTO ERS_REIMBURSEMENT(REIMB_AMOUNT, REIMB_SUBMITTED,
    REIMB_DESC, REIMB_AUTHOR, REIMB_TYPE_ID) 
    VALUES (reimbamount, reimbsubmit,reimbdesc, riembauthor,riembtypeID);
END;

CREATE OR REPLACE PROCEDURE newUser(
username IN VARCHAR2, pw IN VARCHAR2, fn IN VARCHAR2,
ln IN VARCHAR2, email IN VARCHAR2)
IS
BEGIN
    INSERT INTO ERS_USERS(ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL)
    VALUES (username, pw, fn, ln, email);
END;
/

INSERT INTO ERS_USERS(ERS_USERS_ID, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID) VALUES (0, 'BaseAdmin','admin', 'The','Administrator', 'admin@theAdmin.net',2);

INSERT INTO ERS_USER_ROLES(ERS_USER_ROLE_ID, USER_ROLE) VALUES (1, 'USER');
INSERT INTO ERS_USER_ROLES(ERS_USER_ROLE_ID, USER_ROLE) VALUES (2, 'MANAGER');

INSERT INTO ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID, REIMB_STATUS) VALUES (1, 'PENDING');
INSERT INTO ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID, REIMB_STATUS) VALUES (2, 'APPROVED');
INSERT INTO ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID, REIMB_STATUS) VALUES (3, 'DENIED');

INSERT INTO ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID, REIMB_TYPE) VALUES (1, 'LODGING');
INSERT INTO ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID, REIMB_TYPE) VALUES (2, 'TRAVEL');
INSERT INTO ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID, REIMB_TYPE) VALUES (3, 'FOOD');
INSERT INTO ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID, REIMB_TYPE) VALUES (4, 'OTHER');

INSERT INTO ERS_REIMBURSEMENT(REIMB_ID,REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_RESOLVED, REIMB_DESC, REIMB_AUTHOR, REIMB_RESOLVER, REIMB_STATUS_ID, REIMB_TYPE_ID)
VALUES (0, 0,CURRENT_TIMESTAMP, null,'A simple reimbursement.',0,null,1,4);

SELECT * FROM ERS_REIMBURSEMENT WHERE REIMB_STATUS_ID = 1 AND NOT REIMB_AUTHOR  = ? ORDER BY REIMB_SUBMITTED;

SELECT * FROM ERS_REIMBURSEMENT WHERE REIMB_AUTHOR = 0 AND NOT REIMB_STATUS_ID= 1 ORDER BY REIMB_SUBMITTED DESC;

CREATE SEQUENCE user_seq
MINVALUE 0
MAXVALUE 999999
INCREMENT BY 1
START WITH 0;

CREATE SEQUENCE reimb_seq
START WITH 1
MINVALUE 0
MAXVALUE 999999
INCREMENT BY 1;

insert into ERS_USERS(ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL) values ('test_man', 'password', 'test','man','testman@test.com');

CREATE OR REPLACE TRIGGER incrementUsers
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
SELECT user_seq.NEXTVAL INTO :new.ERS_USERS_ID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER incrementReimb
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT reimb_seq.NEXTVAL INTO :new.REIMB_ID FROM dual;
END;
/   

commit;
    
CREATE OR REPLACE PROCEDURE updateStatus(
currentStatus IN VARCHAR2, theID IN NUMBER)
IS
BEGIN
    UPDATE ERS_REIMBURSEMENT_STATUS SET REIMB_STATUS = currentStatus WHERE REIMB_STATUS_ID = theID;
END;
/

create or replace PROCEDURE updateType(
currentType IN NUMBER, rID IN NUMBER, aID IN NUMBER)
IS
BEGIN
    UPDATE ERS_REIMBURSEMENT SET REIMB_TYPE_ID = currentType WHERE REIMB_ID = rID AND REIMB_AUTHOR = aID;
END;
/

INSERT INTO ERS_USERS(ERS_USERS_ID, ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL)VALUES (2, 'testmin', 'admin', 'test', 'admin', 'testadmin@testy.com');
DROP TABLE ERS_USER_ROLES;
DROP TABLE ERS_REIMBURSEMENT;
DROP TABLE ERS_REIMBURSEMENT_STATUS;
DROP TABLE ERS_REIMBURSEMENT_TYPE;
DROP TABLE ERS_USER_ROLES;
DROP TABLE ERS_USERS;